{"version":3,"file":"index.node.js","mappings":"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","sources":["webpack://tela.js/webpack/bootstrap","webpack://tela.js/webpack/runtime/compat get default export","webpack://tela.js/webpack/runtime/define property getters","webpack://tela.js/webpack/runtime/hasOwnProperty shorthand","webpack://tela.js/./src/Canvas_old/main/ImageIO.js","webpack://tela.js/./src/Canvas_old/main/Canvas.js","webpack://tela.js/./src/Canvas_old/main/Canvas2D.js","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/toConsumableArray\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/slicedToArray\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/classCallCheck\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/createClass\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/defineProperty\"","webpack://tela.js/./src/Color/main/Color.js","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/inherits\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/possibleConstructorReturn\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/getPrototypeOf\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/wrapNativeSuper\"","webpack://tela.js/./src/Matrix/main/Matrix.js","webpack://tela.js/./src/BBox/main/BBox.js","webpack://tela.js/./src/Canvas/main/Canvas.js","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/assertThisInitialized\"","webpack://tela.js/external commonjs \"@babel/runtime/helpers/esm/get\"","webpack://tela.js/./src/Canvas2d/main/Canvas2d.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const ImageIO = {\n  // empty object\n};\n\n/**\n * img : html image\n */\nImageIO.getImageCanvas = img => {\n  const canvasAux = document.createElement(\"canvas\");\n  canvasAux.width = img.width;\n  canvasAux.height = img.height;\n  const contextAux = canvasAux.getContext(\"2d\");\n  contextAux.fillStyle = \"rgba(0, 0, 0, 0)\";\n  contextAux.globalCompositeOperation = \"source-over\";\n  contextAux.fillRect(0, 0, canvasAux.width, canvasAux.height);\n  contextAux.drawImage(img, 0, 0);\n  return canvasAux;\n};\n\n/**\n * img : html image\n */\nImageIO.getDataFromImage = img => {\n  canvas = ImageIO.getImageCanvas(img);\n  return canvas.getContext(\"2d\").getImageData(0, 0, img.width, img.height);\n};\n\nImageIO.loadImage = src => {\n  const img = new Image();\n  img.src = src;\n  img.isReady = false;\n  img.onload = () => (img.isReady = true);\n  return img;\n};\n\nImageIO.generateImageReadyPredicate = img => () => img.isReady;\n\nexport default ImageIO;\n","import ImageIO from \"./ImageIO\";\n/*\n Canvas coordinates\n\n 0                  W-1\n +-------------> y\n |\n |\n |       *\n |\n |\n v x\n\n H-1\n */\n\n/*\n\nThe point xe_1 + ye_2 corresponds to a point in the middle of a pxl.\n\nThe canvas data is an array of length colors(C) * width(W) * height(H). Is a 3D-array.\nThe index is a number in [0, C * W * H - 1].\nHaving (x, y, z) where z is the color axis, the formula to index the array is :\n\nf(x, y, z) = C * W * x + C * y + z.\n\nWhere x in [0, H - 1], y in [0, W - 1] and z in [0, C - 1].\n\nNote that f(H - 1, W - 1, C - 1) = C * W * H - 1.\n*/\n\n// Auxiliary functions\nfunction scale(u, r) {\n  var ans = [];\n  ans[0] = u[0] * r;\n  ans[1] = u[1] * r;\n  return ans;\n}\n\nfunction add(u, v) {\n  var ans = [];\n  ans[0] = u[0] + v[0];\n  ans[1] = u[1] + v[1];\n  return ans;\n}\n\nfunction floor(x) {\n  var ans = [];\n  ans[0] = Math.floor(x[0]);\n  ans[1] = Math.floor(x[1]);\n  return ans;\n}\n\nfunction diff(u, v) {\n  var ans = [];\n  ans[0] = u[0] - v[0];\n  ans[1] = u[1] - v[1];\n  return ans;\n}\n\nfunction dot(u, v) {\n  return u[0] * v[0] + u[1] * v[1];\n}\n\nfunction squareNorm(x) {\n  return dot(x, x);\n}\n\nfunction norm(x) {\n  return Math.sqrt(dot(x, x));\n}\n\nfunction min(u, v) {\n  var ans = [];\n  ans[0] = Math.min(u[0], v[0]);\n  ans[1] = Math.min(u[1], v[1]);\n  return ans;\n}\n\nfunction max(u, v) {\n  var ans = [];\n  ans[0] = Math.max(u[0], v[0]);\n  ans[1] = Math.max(u[1], v[1]);\n  return ans;\n}\n\n/**\n * return solution to : [ u_0 , h] x = z_0\n *\n *                       [ u_1,  0] y = z_1\n */\nfunction solve2by2UpperTriMatrix(u, h, z) {\n  var aux = z[1] / u[1];\n  return [aux, (-u[0] * aux + z[0]) / h];\n}\n/**\n * return solution to : [ u_0 , 0] x = z_0\n *\n *                       [ u_1,  w] y = z_1\n */\nfunction solve2by2LowerTriMatrix(u, w, z) {\n  var aux = z[0] / u[0];\n  return [aux, (-u[1] * aux + z[1]) / w];\n}\n\n// Canvas\nvar Canvas = function (canvas) {\n  this.canvas = canvas;\n  this.ctx = canvas.getContext(\"2d\");\n  this.image = this.ctx.getImageData(0, 0, canvas.width, canvas.height);\n  // width * height * 4 array of integers\n  this.imageData = this.image.data;\n};\n\n/**\n * Returns a two vector with Height as first coordinate and Width as second. [Height, Width].\n */\nCanvas.prototype.getSize = function () {\n  return [this.canvas.height, this.canvas.width];\n};\n\n/**\n *  Draw update image on canvas.\n */\nCanvas.prototype.paintImage = function () {\n  this.ctx.putImageData(this.image, 0, 0);\n};\n\nCanvas.prototype.getCanvas = function () {\n  return this.canvas;\n};\n\n/**\n * Clear Image with @rgba color.\n *\n * @param rgba\n */\nCanvas.prototype.clearImage = function (rgba) {\n  this.useCanvasCtx((canvas) => {\n    var size = canvas.getSize();\n    canvas.ctx.fillStyle =\n      \"rgba(\" + rgba[0] + \",\" + rgba[1] + \",\" + rgba[2] + \",\" + rgba[3] + \")\";\n    canvas.ctx.globalCompositeOperation = \"source-over\";\n    canvas.ctx.fillRect(0, 0, size[1], size[0]);\n  }, true);\n};\n\nCanvas.prototype.useCanvasCtx = function (lambda, isClearImage = false) {\n  if (!isClearImage) {\n    this.ctx.putImageData(this.image, 0, 0);\n  }\n  lambda(this);\n  this.image = this.ctx.getImageData(\n    0,\n    0,\n    this.canvas.width,\n    this.canvas.height\n  );\n  this.imageData = this.image.data;\n};\n\nCanvas.prototype.getImageIndex = function (x) {\n  return 4 * (this.canvas.width * x[0] + x[1]);\n};\n\nCanvas.prototype.getPxl = function (x) {\n  var index = this.getImageIndex(x);\n  return [\n    this.imageData[index],\n    this.imageData[index + 1],\n    this.imageData[index + 2],\n    this.imageData[index + 3],\n  ];\n};\n\nCanvas.prototype.drawPxl = function (x, rgb) {\n  var index = this.getImageIndex(x);\n  this.imageData[index] = rgb[0];\n  this.imageData[index + 1] = rgb[1];\n  this.imageData[index + 2] = rgb[2];\n  this.imageData[index + 3] = rgb[3];\n};\n\n/*\n * x1     :   2-dim array\n * x2     :   2-dim array\n * shader :   is a function that receives a 2-dim array and a line (array with 2 points) and returns a rgba 4-dim array\n */\nCanvas.prototype.drawLine = function (x1, x2, shader) {\n  // add points before clip\n  shader.points = [x1, x2];\n\n  // do clipping\n  var stack = [];\n  stack.push(x1);\n  stack.push(x2);\n  var inStack = [];\n  var outStack = [];\n  for (var i = 0; i < stack.length; i++) {\n    var x = stack[i];\n    if (\n      0 <= x[0] &&\n      x[0] < this.canvas.height &&\n      0 <= x[1] &&\n      x[1] < this.canvas.width\n    ) {\n      inStack.push(x);\n    } else {\n      outStack.push(x);\n    }\n  }\n  // both points are inside canvas\n  if (inStack.length == 2) {\n    this.drawLineInt(inStack[0], inStack[1], shader);\n    return;\n  }\n  //intersecting line with canvas\n  var intersectionSolutions = [];\n  var v = [x2[0] - x1[0], x2[1] - x1[1]];\n  // Let s \\in [0,1]\n  // line intersection with [0, 0]^T + [H - 1, 0]^T s\n  intersectionSolutions.push(\n    solve2by2UpperTriMatrix(v, -(this.canvas.height - 1), [-x1[0], -x1[1]])\n  );\n  // line intersection with [H - 1, 0]^T + [0, W - 1]^T s\n  intersectionSolutions.push(\n    solve2by2LowerTriMatrix(v, -(this.canvas.width - 1), [\n      this.canvas.height - 1 - x1[0],\n      -x1[1],\n    ])\n  );\n  // line intersection with [H - 1, W - 1]^T + [-(H - 1), 0]^T s\n  intersectionSolutions.push(\n    solve2by2UpperTriMatrix(v, this.canvas.height - 1, [\n      this.canvas.height - 1 - x1[0],\n      this.canvas.width - 1 - x1[1],\n    ])\n  );\n  // line intersection with [0, W - 1]^T + [0, -(W - 1)]^T s\n  intersectionSolutions.push(\n    solve2by2LowerTriMatrix(v, this.canvas.width - 1, [\n      -x1[0],\n      this.canvas.width - 1 - x1[1],\n    ])\n  );\n\n  var validIntersection = [];\n  for (var i = 0; i < intersectionSolutions.length; i++) {\n    var x = intersectionSolutions[i];\n    if (0 <= x[0] && x[0] <= 1 && 0 <= x[1] && x[1] <= 1) {\n      validIntersection.push(x);\n    }\n  }\n\n  if (validIntersection.length == 0) return;\n\n  //it can be shown that at this point there is at least one valid intersection.\n  if (inStack.length > 0) {\n    var p = [\n      x1[0] + validIntersection[0][0] * v[0],\n      x1[1] + validIntersection[0][0] * v[1],\n    ];\n    this.drawLineInt(inStack.pop(), p, shader);\n    return;\n  }\n\n  var p0 = [\n    x1[0] + validIntersection[0][0] * v[0],\n    x1[1] + validIntersection[0][0] * v[1],\n  ];\n  for (var i = 1; i < validIntersection.length; i++) {\n    var p = [\n      x1[0] + validIntersection[i][0] * v[0],\n      x1[1] + validIntersection[i][0] * v[1],\n    ];\n    var v = diff(p, p0);\n    if (dot(v, v) > 1e-3) {\n      this.drawLineInt(p0, p, shader);\n      return;\n    }\n  }\n  this.drawLineInt(p0, p0, shader);\n};\n\nCanvas.prototype.drawLineInt = function (x1, x2, shader) {\n  x1 = floor(x1);\n  x2 = floor(x2);\n\n  var index = [-1, 0, 1];\n\n  var n = index.length;\n  var nn = n * n;\n\n  var x = [];\n  x[0] = x1[0];\n  x[1] = x1[1];\n\n  var tangent = diff(x2, x1);\n  var normal = [];\n  normal[0] = -tangent[1];\n  normal[1] = tangent[0];\n\n  shader(x, shader.points, this);\n\n  while (x[0] !== x2[0] || x[1] !== x2[1]) {\n    var fmin = Number.MAX_VALUE;\n    var minDir = [];\n    for (var k = 0; k < nn; k++) {\n      var i = index[k % n];\n      var j = index[Math.floor(k / n)];\n\n      var nextX = add(x, [i, j]);\n\n      var v = diff(nextX, x1);\n      var f = Math.abs(dot(v, normal)) - dot(v, tangent);\n      if (fmin > f) {\n        fmin = f;\n        minDir = [i, j];\n      }\n    }\n\n    x = add(x, minDir);\n    shader(x, shader.points, this);\n  }\n  shader(x, shader.points, this);\n};\n\nCanvas.prototype.drawPolygon = function (\n  array,\n  shader,\n  isInsidePoly = Canvas.isInsidePolygon\n) {\n  let upperBox = [\n    [Number.MAX_VALUE, Number.MAX_VALUE],\n    [Number.MIN_VALUE, Number.MIN_VALUE],\n  ];\n  for (let i = 0; i < array.length; i++) {\n    upperBox[0] = min(array[i], upperBox[0]);\n    upperBox[1] = max(array[i], upperBox[1]);\n  }\n\n  let size = this.getSize();\n  let clampedSize = diff(size, [1, 1]);\n  let zeros = [0, 0];\n  upperBox[0] = floor(min(clampedSize, max(zeros, upperBox[0])));\n  upperBox[1] = floor(min(clampedSize, max(zeros, upperBox[1])));\n\n  for (var i = upperBox[0][0]; i < upperBox[1][0]; i++) {\n    for (var j = upperBox[0][1]; j < upperBox[1][1]; j++) {\n      var x = [i, j];\n      if (isInsidePoly(x, array)) {\n        shader(x, array, this);\n      }\n    }\n  }\n};\n\n/*\n * x1     :   2-dim array\n * x2     :   2-dim array\n * x3     :   2-dim array\n * shader :   is a function that receives a 2-dim array and a triangle (array with 3 points) and returns a rgba 4-dim array\n */\nCanvas.prototype.drawTriangle = function (x1, x2, x3, shader) {\n  var array = [x1, x2, x3];\n  this.drawPolygon(array, shader, Canvas.isInsideConvex);\n};\n\n/* x1     :   2-dim array\n * x2     :   2-dim array\n * x3     :   2-dim array\n * x4     :   2-dim array\n * shader :   is a function that receives a 2-dim array and returns a rgba 4-dim array\n */\nCanvas.prototype.drawQuad = function (x1, x2, x3, x4, shader) {\n  this.drawPolygon([x1, x2, x3, x4], shader);\n};\n\nCanvas.prototype.drawImage = function (img, x) {\n  if (\"isReady\" in img && !img.isReady) return;\n  this.useCanvasCtx((canvas) => canvas.ctx.drawImage(img, x[1], x[0]));\n};\n\nCanvas.prototype.drawCircle = function (x, r, shader) {\n  var corner = scale([1, 1], r);\n  var upperBox = [diff(x, corner), add(x, corner)];\n  var size = this.getSize();\n  upperBox[0] = floor(min(diff(size, [1, 1]), max([0, 0], upperBox[0])));\n  upperBox[1] = floor(min(diff(size, [1, 1]), max([0, 0], upperBox[1])));\n  for (var i = upperBox[0][0]; i <= upperBox[1][0]; i++) {\n    for (var j = upperBox[0][1]; j <= upperBox[1][1]; j++) {\n      var p = [i, j];\n      if (this.isInsideCircle(p, x, r)) {\n        shader(p, [x, r], this);\n      }\n    }\n  }\n};\n\nCanvas.prototype.isInsideCircle = function (p, x, r) {\n  return squareNorm(diff(p, x)) <= r * r;\n};\n\nCanvas.prototype.addEventListener = function (key, lambda, useCapture) {\n  this.canvas.addEventListener(key, lambda, useCapture);\n};\n\nCanvas.prototype.drawString = function (x, string, contextShader) {\n  this.useCanvasCtx((canvas) => {\n    contextShader(canvas.ctx);\n    canvas.ctx.fillText(string, x[1], x[0]);\n  });\n};\n\n// Static functions\n\n// slower than isInsideConvex method\nCanvas.isInsidePolygon = function (x, array) {\n  var v = [];\n  var theta = 0;\n  var n = array.length;\n  for (var i = 0; i < n; i++) {\n    v[0] = diff(array[(i + 1) % n], x);\n    v[1] = diff(array[i], x);\n    theta += Math.acos(dot(v[0], v[1]) / (norm(v[0]) * norm(v[1])));\n  }\n  return Math.abs(theta - 2 * Math.PI) < 1e-3;\n};\n\nCanvas.isInsideConvex = function (x, array) {\n  var m = array.length;\n  var v = [];\n  var vDotN = [];\n  for (var i = 0; i < m; i++) {\n    v[i] = diff(array[(i + 1) % m], array[i]);\n    let n = [-v[i][1], v[i][0]];\n    let r = diff(x, array[i]);\n    vDotN[i] = dot(r, n);\n  }\n  let orientation = v[0][0] * v[1][1] - v[0][1] * v[1][0] > 0 ? 1 : -1;\n  for (var i = 0; i < m; i++) {\n    var myDot = vDotN[i] * orientation;\n    if (myDot < 0) return false;\n  }\n  return true;\n};\n\nCanvas.simpleShader = function (color) {\n  return (x, element, canvas) => canvas.drawPxl(x, color);\n};\n\nCanvas.colorShader = function (colors) {\n  var auxShader = (x, poly, canvas, alpha) => {\n    var interpolateColors = [0, 0, 0, 0];\n    for (var i = 0; i < poly.length; i++) {\n      interpolateColors[0] = interpolateColors[0] + colors[i][0] * alpha[i];\n      interpolateColors[1] = interpolateColors[1] + colors[i][1] * alpha[i];\n      interpolateColors[2] = interpolateColors[2] + colors[i][2] * alpha[i];\n      interpolateColors[3] = interpolateColors[3] + colors[i][3] * alpha[i];\n    }\n    canvas.drawPxl(x, interpolateColors);\n  };\n  return Canvas.interpolateTriangleShader(auxShader);\n};\n\nCanvas.interpolateQuadShader = function (shader) {\n  return function (x, quad, canvas) {\n    var t1 = [quad[0], quad[1], quad[2]];\n    var t2 = [quad[2], quad[3], quad[0]];\n    var alpha = Canvas.triangleBaryCoord(x, t1);\n    if (\n      alpha[0] > 0 &&\n      alpha[1] > 0 &&\n      alpha[2] > 0 &&\n      Math.abs(alpha[0] + alpha[1] + alpha[2] - 1) < 1e-10\n    ) {\n      shader(x, quad, canvas, [alpha[0], alpha[1], alpha[2], 0]);\n    } else {\n      alpha = Canvas.triangleBaryCoord(x, t2);\n      shader(x, quad, canvas, [alpha[2], 0, alpha[0], alpha[1]]);\n    }\n  };\n};\n\nCanvas.interpolateTriangleShader = function (shader) {\n  return (x, triangle, canvas) => {\n    const alpha = Canvas.triangleBaryCoord(x, triangle);\n    shader(x, triangle, canvas, alpha);\n  };\n};\n\nCanvas.interpolateLineShader = function (shader) {\n  return (x, line, canvas) => {\n    var v = diff(line[1], line[0]);\n    var z = diff(x, line[0]);\n    var vnorm = squareNorm(v);\n    var projection = dot(z, v);\n    var t = vnorm == 0.0 ? 0 : projection / vnorm;\n    shader(x, line, canvas, t);\n  };\n};\n\n/**\n * img: html loaded image.\n * quadTexCoord: [0, 1]^{2 * 4}, texture coordinates\n */\nCanvas.quadTextureShader = function (\n  img,\n  quadTexCoord,\n  interpolation = Canvas.bilinearInterpolation\n) {\n  let imageCache = null;\n  const imageShader = (x, quad, canvas, alpha) => {\n    if (!img.isReady || imageCache == null)\n      imageCache = new Canvas(ImageIO.getImageCanvas(img));\n    const imageCanvas = imageCache;\n    const imgSize = imageCanvas.getSize();\n    const interpolateTexCoord = [0, 0];\n    for (let i = 0; i < quadTexCoord.length; i++) {\n      interpolateTexCoord[0] =\n        interpolateTexCoord[0] + quadTexCoord[i][0] * alpha[i];\n      interpolateTexCoord[1] =\n        interpolateTexCoord[1] + quadTexCoord[i][1] * alpha[i];\n    }\n    var i = [\n      (1 - interpolateTexCoord[1]) * (imgSize[1] - 1),\n      (imgSize[0] - 1) * interpolateTexCoord[0],\n    ];\n    // bound coordinates\n    i = max([0, 0], min(diff([imgSize[0], imgSize[1]], [1, 1]), i));\n    // pxl lower corner\n    var j = floor(i);\n    var cornerColors = [\n      imageCanvas.getPxl(j),\n      imageCanvas.getPxl(add(j, [1, 0])),\n      imageCanvas.getPxl(add(j, [1, 1])),\n      imageCanvas.getPxl(add(j, [0, 1])),\n    ];\n    var finalColor = interpolation(cornerColors, diff(i, j));\n    canvas.drawPxl(x, finalColor);\n  };\n  return Canvas.interpolateQuadShader(imageShader);\n};\n\nCanvas.triangleCache = (() => {\n  const hashMap = [];\n  const size = 3;\n  return {\n    constains: (triangleHash) => hashMap[triangleHash % size] != undefined,\n    get: (triangleHash) => hashMap[triangleHash % size],\n    set: (triangleHash, value) => (hashMap[triangleHash % size] = value),\n  };\n})(); //{triangle: null, u: [], v:[], det:null, hash:null}\n\nCanvas.triangleHash = (triangle) => {\n  const array = [\n    triangle[0][0],\n    triangle[1][0],\n    triangle[2][0],\n    triangle[0][1],\n    triangle[1][1],\n    triangle[2][1],\n  ];\n  return array.reduce((h, x) => 31 * h + x, 1);\n};\n\nCanvas.triangleBaryCoord = function (x, triangle) {\n  const hash = Canvas.triangleHash(triangle);\n  const y = [x[0] - triangle[0][0], x[1] - triangle[0][1]];\n  if (!Canvas.triangleCache.constains(hash)) {\n    const u = [\n      triangle[1][0] - triangle[0][0],\n      triangle[1][1] - triangle[0][1],\n    ];\n    const v = [\n      triangle[2][0] - triangle[0][0],\n      triangle[2][1] - triangle[0][1],\n    ];\n    const det = u[0] * v[1] - u[1] * v[0];\n    Canvas.triangleCache.set(hash, {\n      triangle: triangle,\n      u: u.map((x) => x / det),\n      v: v.map((x) => x / det),\n      det: det,\n      hash: hash,\n    });\n  }\n  const cache = Canvas.triangleCache.get(hash);\n  const u = cache.u;\n  const v = cache.v;\n  const det = cache.det;\n  if (det == 0) return [0, 0, 0];\n  var alpha = [v[1] * y[0] - v[0] * y[1], u[0] * y[1] - u[1] * y[0]];\n  return [1 - alpha[0] - alpha[1], alpha[0], alpha[1]];\n};\n\n/**\n * values \\in R^{k * 4}\n * x \\in [0,1]^2\n */\nCanvas.bilinearInterpolation = function (values, x) {\n  var acc = [];\n  for (var k = 0; k < values.length; k++) {\n    var f03 = values[0][k] + (values[3][k] - values[0][k]) * x[1];\n    var f12 = values[1][k] + (values[2][k] - values[1][k]) * x[1];\n    var f = f03 + (f12 - f03) * x[0];\n    acc.push(f);\n  }\n  return acc;\n};\n/**\n * size: is an array with width and height of a HTML5 Canvas.\n * domId: DOM element where the canvas will be added\n *\n * returns Canvas object from the generated html canvas.\n */\nCanvas.createCanvas = function (size, domId) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.setAttribute(\"width\", size[0]);\n  canvas.setAttribute(\"height\", size[1]);\n  document.getElementById(domId).appendChild(canvas);\n  return canvas;\n};\n\nexport default Canvas;\n","import Canvas from \"./Canvas\";\n\n//Note that we can switch from heritage to composition, think about that\n\n// cameraSpace : 2-dim array with two 2-dim arrays that are intervals [a,b] | a < b\nvar Canvas2D = function (canvas, cameraSpace) {\n  Canvas.call(this, canvas);\n  if (\n    cameraSpace.length != 2 ||\n    (cameraSpace[0].length != 2 && cameraSpace[1].length != 2)\n  ) {\n    throw \"camera space must be 2-dim array with 2-dim arrays representing an interval\";\n  }\n  this.cameraSpace = cameraSpace;\n};\n\nCanvas2D.prototype = Object.create(Canvas.prototype);\nCanvas2D.prototype.constructor = Canvas2D;\n\n/* x : 2-dim array in camera space coordinates\n * returns : 2-dim array in integer coordinates\n */\nCanvas2D.prototype.integerTransform = function (x) {\n  var xint =\n    (-(this.canvas.height - 1) /\n      (this.cameraSpace[1][1] - this.cameraSpace[1][0])) *\n    (x[1] - this.cameraSpace[1][1]);\n  var yint =\n    ((this.canvas.width - 1) /\n      (this.cameraSpace[0][1] - this.cameraSpace[0][0])) *\n    (x[0] - this.cameraSpace[0][0]);\n  return [xint, yint];\n};\n\n/* x : 2-dim array in integer coordinates\n * returns : 2-dim array in camera space coordinates\n */\nCanvas2D.prototype.inverseTransform = function (x) {\n  var xt =\n    this.cameraSpace[0][0] +\n    ((this.cameraSpace[0][1] - this.cameraSpace[0][0]) /\n      (this.canvas.width - 1)) *\n      x[1];\n  var yt =\n    this.cameraSpace[1][1] -\n    ((this.cameraSpace[1][1] - this.cameraSpace[1][0]) /\n      (this.canvas.height - 1)) *\n      x[0];\n  return [xt, yt];\n};\n\n/* x1     :   2-dim array\n * x2     :   2-dim array\n * shader :   is a function that receives a 2-dim array and returns a rgba 4-dim array\n */\nCanvas2D.prototype.drawLine = function (x1, x2, shader) {\n  const y1 = this.integerTransform(x1);\n  const y2 = this.integerTransform(x2);\n  Canvas.prototype.drawLine.call(this, y1, y2, shader);\n};\n\n/* x1     :   2-dim array\n * x2     :   2-dim array\n * x3     :   2-dim array\n * shader :   is a function that receives a 2-dim array and returns a rgba 4-dim array\n */\nCanvas2D.prototype.drawTriangle = function (x1, x2, x3, shader) {\n  const y1 = this.integerTransform(x1);\n  const y2 = this.integerTransform(x2);\n  const y3 = this.integerTransform(x3);\n  Canvas.prototype.drawTriangle.call(this, y1, y2, y3, shader);\n};\n\n/* x1     :   2-dim array\n * x2     :   2-dim array\n * x3     :   2-dim array\n * x4     :   2-dim array\n * shader :   is a function that receives a 2-dim array and returns a rgba 4-dim array\n */\nCanvas2D.prototype.drawQuad = function (x1, x2, x3, x4, shader) {\n  const y1 = this.integerTransform(x1);\n  const y2 = this.integerTransform(x2);\n  const y3 = this.integerTransform(x3);\n  const y4 = this.integerTransform(x4);\n  Canvas.prototype.drawQuad.call(this, y1, y2, y3, y4, shader);\n};\n\nCanvas2D.prototype.drawCircle = function (x, r, shader) {\n  // it assumes squared canvas, for now ...\n  const y = this.integerTransform(x);\n  const z = this.integerTransform([r, 0])[1] - this.integerTransform([0, 0])[1];\n  Canvas.prototype.drawCircle.call(this, y, z, shader);\n};\n\nCanvas2D.prototype.drawImage = function (img, x) {\n  Canvas.prototype.drawImage.call(this, img, this.integerTransform(x));\n};\n\nCanvas2D.prototype.drawString = function (x, string, contextShader) {\n  const y = this.integerTransform(x);\n  Canvas.prototype.drawString.call(this, y, string, contextShader);\n};\n\n// camera : 2-dim array with two 2-dim arrays that are intervals [a,b] | a < b\nCanvas2D.prototype.setCamera = function (camera) {\n  if (camera.length != 2 || (camera[0].length != 2 && camera[1].length != 2)) {\n    throw \"camera space must be 2-dim array with 2-dim arrays representing an interval\";\n  }\n  this.cameraSpace = camera;\n};\n\nexport default Canvas2D;\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/toConsumableArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/slicedToArray\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/classCallCheck\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/createClass\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/defineProperty\");","const MAX_8BIT = 255;\n\nexport default class Color {\n  /**\n   *\n   * @param {Uint8Array} rgba\n   */\n  constructor(rgba) {\n    this.rgba = rgba;\n  }\n\n  getRGBA() {\n    return this.rgba;\n  }\n\n  get red() {\n    return this.rgba[0];\n  }\n\n  get green() {\n    return this.rgba[1];\n  }\n\n  get blue() {\n    return this.rgba[2];\n  }\n\n  get alpha() {\n    return this.rgba[3];\n  }\n\n  get redRaw(){\n    return this.red * MAX_8BIT;\n  }\n  get greenRaw(){\n    return this.green * MAX_8BIT;\n  }\n  get blueRaw(){\n    return this.blue * MAX_8BIT;\n  }\n\n  /**\n   *\n   * @param {Color} color\n   * @returns {Boolean}\n   */\n  equals(color) {\n    for (let i = 0; i < this.rgba.length; i++) {\n      if (this.rgba[i] !== color.rgba[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  static ofRGBA(red = 0, green = 0, blue = 0, alpha = 1) {\n    const rgba = new Uint8Array(4);\n    rgba[0] = red * MAX_8BIT;\n    rgba[1] = green * MAX_8BIT;\n    rgba[2] = blue * MAX_8BIT;\n    rgba[3] = alpha * MAX_8BIT;\n    return new Color(rgba);\n  }\n\n  static ofRGBARaw(red = 0, green = 0, blue = 0, alpha = 255) {\n    const rgba = new Uint8Array(4);\n    rgba[0] = red;\n    rgba[1] = green;\n    rgba[2] = blue;\n    rgba[3] = alpha;\n    return new Color(rgba);\n  }\n\n  static random() {\n    const r = () => Math.random() * 256;\n    return Color.ofRGBA(r(), r(), r(), r());\n  }\n\n  static RED = Color.ofRGBA(1, 0, 0);\n  static GREEN = Color.ofRGBA(0, 1, 0);\n  static BLUE = Color.ofRGBA(0, 0, 1);\n  static BLACK = Color.ofRGBA(0, 0, 0);\n  static WHITE = Color.ofRGBA(1, 1, 1);\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/inherits\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/possibleConstructorReturn\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/getPrototypeOf\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/wrapNativeSuper\");","//========================================================================================\n/*                                                                                      *\n *                              MATRIX UTILS (order counts)                             *\n *                                                                                      */\n//========================================================================================\n\nconst getIndexFromCoord = (_, m) => (i, j) => j + i * m;\nconst getCoordFromIndex = (_, m) => (k) => [k / m, k % m].map(Math.floor);\nconst index2Key = (i, j) => `${i},${j}`;\nconst key2Index = (k) => k.split(\",\").map(Number);\n\nclass MatrixBuilder {\n  constructor() {\n    this._size = [];\n    this.data = {};\n  }\n\n  size(n, m = 1) {\n    this._size = [n, m];\n    return this;\n  }\n\n  set(i, j, v) {\n    if (this._size.length === 0)\n      throw new MatrixError(\"Setting value to empty matrix\");\n    this.data[index2Key(i, j)] = v;\n    return this;\n  }\n\n  build() {\n    const [n, m] = this._size;\n    const data = new Float64Array(n * m);\n    const indexer = getIndexFromCoord(n, m);\n    Object.keys(this.data).forEach((key) => {\n      data[indexer(...key2Index(key))] = this.data[key];\n    });\n    return new Matrix(data, this._size);\n  }\n}\n\nclass RowBuilder {\n  constructor() {\n    this.rows = [];\n    this.dim = 0;\n  }\n\n  addRow(...array) {\n    if (this.dim === 0) {\n      this.dim = array.length;\n    }\n    if (this.dim !== array.length)\n      throw new MatrixError(\n        `Added row of different dimension, actual dim is ${this.dim}`\n      );\n    this.rows.push(array);\n    return this;\n  }\n\n  build() {\n    if (this.rows.length > 0) return this._buildWithRows();\n    throw new MatrixError(\"Building empty matrix\");\n  }\n\n  _buildWithRows() {\n    const rows = this.rows.length;\n    const cols = this.dim;\n    const data = new Float64Array(rows * cols);\n    const indexF = getIndexFromCoord(rows, cols);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        data[indexF(i, j)] = this.rows[i][j];\n      }\n    }\n    return new Matrix(data, [rows, cols]);\n  }\n}\n\nclass ColBuilder {\n  constructor() {\n    this.cols = [];\n    this.dim = 0;\n  }\n\n  addCol(...array) {\n    if (this.dim === 0) {\n      this.dim = array.length;\n    }\n    if (this.dim !== array.length)\n      throw new MatrixError(\n        `Added col of different dimension, actual dim is ${this.dim}`\n      );\n    this.cols.push(array);\n    return this;\n  }\n\n  build() {\n    if (this.cols.length > 0) return this.#buildWithCols();\n    throw new MatrixError(\"Building empty matrix\");\n  }\n\n  #buildWithCols() {\n    const rows = this.dim;\n    const cols = this.cols.length;\n    const data = new Float64Array(rows * cols);\n    const indexF = getIndexFromCoord(rows, cols);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        data[indexF(i, j)] = this.cols[j][i];\n      }\n    }\n    return new Matrix(data, [rows, cols]);\n  }\n}\n\n//========================================================================================\n/*                                                                                      *\n *                                        MATRIX                                        *\n *                                                                                      */\n//========================================================================================\n\nexport default class Matrix {\n  /**\n   *\n   * @param {Float64Array} data: Matrix data in major row format\n   * @param {Array} shape: 2-array [rows,columns]\n   */\n  constructor(data, shape) {\n    this.data = data;\n    this.shape = shape;\n  }\n\n  get rows() {\n    return this.shape[0];\n  }\n\n  get cols() {\n    return this.shape[1];\n  }\n\n  get(i = 0, j = 0) {\n    const [_, cols] = this.shape;\n    return this.data[j + i * cols];\n  }\n\n  prod(matrix) {\n    if (this.cols !== matrix.rows) {\n      throw new MatrixError(\n        `Incompatible product size. Left ${this.shape}, right ${matrix.shape}`\n      );\n    }\n    const n = this.rows;\n    const m = this.cols;\n    const l = matrix.cols;\n    const prod = new Float64Array(n * l);\n    const indexer = getIndexFromCoord(n, l);\n    for (let i = 0; i < n; i++) {\n      for (let j = 0; j < l; j++) {\n        let acc = 0;\n        for (let k = 0; k < m; k++) {\n          acc += this.get(i, k) * matrix.get(k, j);\n        }\n        prod[indexer(i, j)] = acc;\n      }\n    }\n\n    return new Matrix(prod, [n, l]);\n  }\n\n  dot(matrix) {\n    if (this.rows !== matrix.rows)\n      throw new MatrixError(\n        `Incompatible product size. Left ${this.shape}, right ${matrix.shape}`\n      );\n    const n = this.rows;\n    const m = this.cols;\n    const l = matrix.cols;\n    const prod = new Float64Array(m * l);\n    const indexer = getIndexFromCoord(m, l);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < l; j++) {\n        let acc = 0;\n        for (let k = 0; k < n; k++) {\n          acc += this.get(k, i) * matrix.get(k, j);\n        }\n        prod[indexer(i, j)] = acc;\n      }\n    }\n\n    return new Matrix(prod, [m, l]);\n  }\n\n  /**\n   *\n   * @param {*} lambda: (number, i, j) => number\n   * @returns Matrix\n   */\n  map(lambda = (x) => x) {\n    const getCoord = getCoordFromIndex(...this.shape);\n    return new Matrix(\n      this.data.map((x, k) => {\n        const [i, j] = getCoord(k);\n        return lambda(x, i, j);\n      }),\n      this.shape\n    );\n  }\n\n  /**\n   *\n   * @param {*} lambda (accumulator, number, i, j) => number\n   * @param {*} identity\n   */\n  reduce(lambda, identity = 0) {\n    const getCoord = getCoordFromIndex(...this.shape);\n    return this.data.reduce((e, x, k) => {\n      const [i, j] = getCoord(k);\n      return lambda(e, x, i, j);\n    }, identity);\n  }\n\n  fold = this.reduce;\n\n  /**\n   *\n   * @param {*} binaryLambda: (number,number) => number\n   */\n  op(matrix, binaryLambda) {\n    const [rows, cols] = this.shape;\n    const [mRows, mCols] = matrix.shape;\n    if (rows !== mRows || cols !== mCols)\n      throw new MatrixError(\"Matrix must be of same size\");\n    return new Matrix(\n      this.data.map((x, i) => binaryLambda(x, matrix.data[i])),\n      this.shape\n    );\n  }\n\n  add(matrix) {\n    return this.op(matrix, (a, b) => a + b);\n  }\n\n  sub(matrix) {\n    return this.op(matrix, (a, b) => a - b);\n  }\n\n  mul(matrix) {\n    return this.op(matrix, (a, b) => a * b);\n  }\n\n  div(matrix) {\n    return this.op(matrix, (a, b) => a / b);\n  }\n\n  scale(real) {\n    return this.map((x) => x * real);\n  }\n\n  norm() {\n    let acc = 0;\n    for (let i = 0; i < this.data.length; i++) {\n      acc += this.data[i] * this.data[i];\n    }\n    return Math.sqrt(acc);\n  }\n\n  length = this.norm;\n\n  equals(matrix, precision = 1e-6) {\n    if (!(matrix instanceof Matrix)) return false;\n    try {\n      return this.sub(matrix).length() < precision;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  toArray() {\n    return this.data;\n  }\n\n  static id = (n, m = n) => {\n    const en = Matrix.e(n);\n    let matrixBuilder = Matrix.colBuilder();\n    for (let i = 0; i < m; i++) {\n      matrixBuilder = matrixBuilder.addCol(...en(i).data);\n    }\n    return matrixBuilder.build();\n  };\n\n  static e = (n) => (i) => {\n    return new Matrix(\n      new Float64Array(n).map((_, j) => (i === j ? 1 : 0)),\n      [n, 1]\n    );\n  };\n\n  static dx = (n) => (i) => {\n    return new Matrix(\n      new Float64Array(n).map((_, j) => (i === j ? 1 : 0)),\n      [1, n]\n    );\n  };\n\n  static ZERO(n, m = 1) {\n    return Matrix.builder().size(n, m).build();\n  }\n\n  static random(n, m = 1) {\n    const data = new Float64Array(n * m);\n    for (let i = 0; i < data.length; i++) {\n      data[i] = Math.random();\n    }\n    return new Matrix(data, [n, m]);\n  }\n\n  static builder() {\n    return new MatrixBuilder();\n  }\n\n  static rowBuilder() {\n    return new RowBuilder();\n  }\n\n  static colBuilder() {\n    return new ColBuilder();\n  }\n\n  static vec(...array) {\n    return new ColBuilder().addCol(...array).build();\n  }\n\n  static cov(...array) {\n    return new RowBuilder().addRow(...array).build();\n  }\n\n  static vec2 = {\n    of: (x = 0, y = 0) => Matrix.vec(x, y),\n    e0: Matrix.vec(1, 0),\n    e1: Matrix.vec(0, 1),\n    ZERO: Matrix.ZERO(2, 1),\n  };\n\n  static vec3 = {\n    of: (x = 0, y = 0, z = 0) => Matrix.vec(x, y, z),\n    e0: Matrix.vec(1, 0, 0),\n    e1: Matrix.vec(0, 1, 0),\n    e2: Matrix.vec(0, 0, 1),\n    ZERO: Matrix.ZERO(3, 1),\n  };\n}\n\nexport class MatrixError extends Error {}\n","import Matrix from \"../../Matrix/main/Matrix\";\n\nexport default class BBox {\n  constructor(min, max) {\n    this.isEmpty = min === undefined || max === undefined;\n    if (this.isEmpty) return this;\n    this.min = min.op(max, Math.min);\n    this.max = max.op(min, Math.max);\n    this.center = min.add(max).scale(1 / 2);\n    this.diagonal = max.sub(min);\n  }\n  /**\n   * Union of boxes\n   * @param {*} box\n   */\n  add(box) {\n    if (this === BBox.EMPTY) return box;\n    const { min, max } = this;\n    return new BBox(min.op(box.min, Math.min), max.op(box.max, Math.max));\n  }\n\n  union = this.add;\n\n  /**\n   * Intersection of boxes\n   * @param {*} box\n   */\n  sub(box) {\n    if (this === BBox.EMPTY) return BBox.EMPTY;\n    const { min, max } = this;\n    const newMin = min.op(box.min, Math.max);\n    const newMax = max.op(box.max, Math.min);\n    const newDiag = newMax.sub(newMin);\n    const isAllPositive = newDiag.data.every((x) => x >= 0);\n    return !isAllPositive ? BBox.EMPTY : new BBox(newMin, newMax);\n  }\n\n  inter = this.sub;\n\n  move(vector) {\n    return new BBox(this.min.add(vector), this.max.add(vector));\n  }\n\n  collidesWith(box) {\n    const actionByTypes = [\n      { type: BBox, action: () => !this.sub(box).isEmpty },\n      { type: Matrix, action: () => !this.sub(new BBox(box, box)).isEmpty },\n    ];\n    for (let i = 0; i < actionByTypes.length; i++) {\n      if (box instanceof actionByTypes[i].type) {\n        return actionByTypes[i].action();\n      }\n    }\n  }\n\n  equals(box) {\n    if (!(box instanceof BBox)) return false;\n    if (this == BBox.EMPTY) return true;\n    return this.min.equals(box.min) && this.max.equals(box.max);\n  }\n\n  static ofPoint(...array) {\n    const point = Matrix.vec(...array);\n    return new BBox(point, point);\n  }\n  static EMPTY = new BBox();\n}\n","import Color from \"../../Color/main/Color\";\nimport Matrix from \"../../Matrix/main/Matrix\";\nimport BBox from \"../../BBox/main/BBox\";\nconst { vec2 } = Matrix;\n/*\n Canvas coordinates\n\n 0                  W-1\n +-------------> y\n |\n |\n |       *\n |\n |\n v x\n\n H-1\n/*\n\nThe point xe_1 + ye_2 corresponds to a point in the middle of a pxl.\n\nThe canvas data is an array of length colors(C) * width(W) * height(H). Is a 3D-array.\nThe index is a number in [0, C * W * H - 1].\nHaving (x, y, z) where z is the color axis, the formula to index the array is :\n\nf(x, y, z) = C * W * x + C * y + z.\n\nWhere x in [0, H - 1], y in [0, W - 1] and z in [0, C - 1].\n\nNote that f(H - 1, W - 1, C - 1) = C * W * H - 1.\n*/\n\nexport default class Canvas {\n  /**\n   *\n   * @param {canvasDOM} canvas: DOM element of type canvas\n   */\n  constructor(canvas) {\n    this.canvas = canvas;\n    this.ctx = canvas.getContext(\"2d\", {\n      willReadFrequently: true\n    });\n    this.image = this.ctx.getImageData(0, 0, canvas.width, canvas.height);\n    // width * height * 4 array of integers\n    this.data = this.image.data;\n  }\n\n  getCanvas() {\n    return this.canvas;\n  }\n\n  getDom = this.getCanvas;\n\n  get width() {\n    return this.canvas.width;\n  }\n\n  get height() {\n    return this.canvas.height;\n  }\n  //========================================================================================\n  /*                                                                                      *\n   *                                 side effects function                                *\n   *                                                                                      */\n  //========================================================================================\n\n  /**\n   * Update color of canvas\n   * @param {Color} color\n   * @returns {Canvas}\n   */\n  fill(color = Color.ofRGBARaw(255, 255, 255)) {\n    this.ctx.fillStyle = `rgba(${color.red}, ${color.green}, ${color.blue}, ${color.alpha / 255.0\n      })`;\n    console.log(this.ctx.fillStyle);\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n    this.image = this.ctx.getImageData(\n      0,\n      0,\n      this.canvas.width,\n      this.canvas.height\n    );\n    this.data = this.image.data;\n    return this;\n  }\n\n  /**\n   *\n   * @param {(Color, Number, Number) => Color} lambda\n   * @returns {Canvas}\n   */\n  map(lambda = () => { }) {\n    const n = this.data.length;\n    const { width: w } = this.canvas;\n    for (let i = 0; i < n; i += 4) {\n      const x = Math.floor(i / (4 * w));\n      const y = Math.floor(i / 4) % w;\n      const color = lambda(\n        Color.ofRGBARaw(\n          this.data[i],\n          this.data[i + 1],\n          this.data[i + 2],\n          this.data[i + 3]\n        ),\n        x,\n        y\n      );\n      this.data[i] = color.red;\n      this.data[i + 1] = color.green;\n      this.data[i + 2] = color.blue;\n      this.data[i + 3] = color.alpha;\n    }\n    return this;\n  }\n\n  /**\n   * Return pxl color at (i,j)\n   * @param {Number} i: integer \\in [0,H-1]\n   * @param {Number} j: integer \\in [0,W-1]\n   * @returns {Color}\n   */\n  getPxl(i, j) {\n    const { width, height } = this.canvas;\n    if (i < 0 || i >= height || j < 0 || j >= width) return undefined;\n    const index = 4 * (i * width + j);\n    return Color.ofRGBARaw(\n      this.data[index],\n      this.data[index + 1],\n      this.data[index + 2],\n      this.data[index + 3]\n    );\n  }\n  /**\n   * Set pxl color at (i,j)\n   * @param {Number} i: integer \\in [0,H-1]\n   * @param {Number} j: integer \\in [0,W-1]\n   * @param {Color} color\n   */\n  setPxl(i, j, color) {\n    const { width, height } = this.canvas;\n    if (i < 0 || i >= height || j < 0 || j >= width) return this;\n    const index = 4 * (i * width + j);\n    this.data[index] = color.red;\n    this.data[index + 1] = color.green;\n    this.data[index + 2] = color.blue;\n    this.data[index + 3] = color.alpha;\n    return this;\n  }\n\n  /**\n   *\n   * @param {Array<Number>} start: 2-Array\n   * @param {Array<Number>} end: 2-Array\n   * @param {Canvas}\n   */\n  drawLine(start, end, shader = (x, y) => Color.ofRGBA(0, 0, 0)) {\n    // faster than using vec2\n    const { width, _ } = this.canvas;\n    const line = this._clipLine(start, end).map((x) => x.toArray());\n    if (line.length === 0) return;\n    const [p0, p1] = line;\n    const v = [p1[0] - p0[0], p1[1] - p0[1]];\n    const n = Math.abs(v[0]) + Math.abs(v[1]);\n    for (let k = 0; k < n; k++) {\n      const s = k / n;\n      const x = [p0[0] + v[0] * s, p0[1] + v[1] * s].map(Math.floor);\n      const [i, j] = x;\n      const index = 4 * (i * width + j);\n      const color = shader(i, j);\n      this.data[index] = color.red;\n      this.data[index + 1] = color.green;\n      this.data[index + 2] = color.blue;\n      this.data[index + 3] = color.alpha;\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param {Array<Number>} p0 : 2-array<number>\n   * @param {Array<Number>} p1 : 2-array<number>\n   * @param {Array<Number>} p2 : 2-array<number>\n   * @param {(Number, Number) => Color} shader : (number, number) => Color\n   * @returns\n   */\n  drawTriangle(p0, p1, p2, shader = (x, y) => Color.ofRGBA(0, 0, 0)) {\n    return this._drawConvexPolygon([p0, p1, p2], shader);\n  }\n\n  paint() {\n    this.ctx.putImageData(this.image, 0, 0);\n  }\n\n  //========================================================================================\n  /*                                                                                      *\n   *                                  Auxiliary functions                                  *\n   *                                                                                      */\n  //========================================================================================\n\n  /**\n   *\n   * @param {*} arrayOfPoints : Array<2-Array<Number>>\n   * @param {*} shader : (x,y) => color\n   * @returns\n   */\n  _drawConvexPolygon(arrayOfPoints, shader) {\n    const { width, height } = this.canvas;\n    const canvasBox = new BBox(vec2.ZERO, vec2.of(height, width));\n    let boundingBox = BBox.EMPTY;\n    arrayOfPoints.forEach((x) => {\n      boundingBox = boundingBox.add(BBox.ofPoint(...x));\n    });\n    const finalBox = canvasBox.inter(boundingBox);\n    const [xMin, yMin] = finalBox.min.toArray();\n    const [xMax, yMax] = finalBox.max.toArray();\n\n    for (let i = xMin; i < xMax; i++) {\n      for (let j = yMin; j < yMax; j++) {\n        if (this._isInsideConvex([i, j], arrayOfPoints)) {\n          const color = shader(i, j);\n          const index = 4 * (i * width + j);\n          this.data[index] = color.red;\n          this.data[index + 1] = color.green;\n          this.data[index + 2] = color.blue;\n          this.data[index + 3] = color.alpha;\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   *\n   * @param {*} x: 2-Array<Number>\n   * @param {*} points: Array<2-Array<Number>>\n   * @returns\n   */\n  _isInsideConvex(x, points) {\n    const m = points.length;\n    const v = [];\n    const vDotN = [];\n    for (let i = 0; i < m; i++) {\n      const p1 = points[(i + 1) % m];\n      const p0 = points[i];\n      v[i] = [p1[0] - p0[0], p1[1] - p0[1]];\n      const vi = v[i];\n      const n = [-vi[1], vi[0]];\n      const r = [x[0] - p0[0], x[1] - p0[1]];\n      vDotN[i] = r[0] * n[0] + r[1] * n[1];\n    }\n    let orientation = v[0][0] * v[1][1] - v[0][1] * v[1][0] >= 0 ? 1 : -1;\n    for (let i = 0; i < m; i++) {\n      const myDot = vDotN[i] * orientation;\n      if (myDot < 0) return false;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param {*} start: 2-Array<Number>\n   * @param {*} end: 2-Array<Number>\n   * @returns 2-Array<2-Array<Number>>\n   */\n  _clipLine(start, end) {\n    const { width, height } = this.canvas;\n    const bbox = new BBox(vec2.ZERO, vec2.of(height, width));\n    const pointStack = [start, end].map((x) => vec2.of(...x));\n    const inStack = [];\n    const outStack = [];\n    for (let i = 0; i < pointStack.length; i++) {\n      const p = pointStack[i];\n      if (bbox.collidesWith(p)) {\n        inStack.push(p);\n      } else {\n        outStack.push(p);\n      }\n    }\n    // both points are inside\n    if (inStack.length >= 2) {\n      return inStack;\n    }\n    // one of them is inside\n    if (inStack.length === 1) {\n      const [inPoint] = inStack;\n      const [outPoint] = outStack;\n      return [inPoint, ...this._getLineCanvasIntersection(inPoint, outPoint)];\n    }\n    // both points are outside,need to intersect the boundary\n    return this._getLineCanvasIntersection(...outStack);\n  }\n\n  /**\n   *\n   * @param {*} start: vec2(matrix)\n   * @param {*} end: vec2(matrix)\n   */\n  _getLineCanvasIntersection(start, end) {\n    const { width, height } = this.canvas;\n    const v = end.sub(start);\n    // point and direction of boundary\n    const boundary = [\n      [vec2.ZERO, vec2.of(height, 0)],\n      [vec2.of(height, 0), vec2.of(0, width)],\n      [vec2.of(height, width), vec2.of(-height, 0)],\n      [vec2.of(0, width), vec2.of(0, -width)],\n    ];\n    const intersectionSolutions = [];\n    boundary.forEach(([s, d]) => {\n      if (d.get(0) === 0) {\n        const solution = this._solveLowTriMatrix(v, -d.get(1), s.sub(start));\n        solution !== undefined && intersectionSolutions.push(solution);\n      } else {\n        const solution = this._solveUpTriMatrix(v, -d.get(0), s.sub(start));\n        solution !== undefined && intersectionSolutions.push(solution);\n      }\n    });\n    const validIntersections = [];\n    intersectionSolutions.forEach((solution) => {\n      const [x, y] = [solution.get(0), solution.get(1)];\n      if (0 <= x && x <= 1 && 0 <= y && y <= 1) {\n        validIntersections.push(solution);\n      }\n    });\n    if (validIntersections.length === 0) return [];\n    return validIntersections.map((solution) => {\n      const t = solution.get(0);\n      return start.add(v.scale(t));\n    });\n  }\n\n  /**\n   *\n   * @param {*} v: vec2\n   * @param {*} a: number\n   * @param {*} f: vec2\n   * @returns vec2\n   */\n  _solveLowTriMatrix(v, a, f) {\n    const v1 = v.get(0);\n    const v2 = v.get(1);\n    const av1 = a * v1;\n    if (av1 === 0 || v1 === 0) return undefined;\n    const f1 = f.get(0);\n    const f2 = f.get(1);\n    return vec2.of(f1 / v1, (f2 * v1 - v2 * f1) / av1);\n  }\n\n  /**\n   *\n   * @param {*} v: vec2\n   * @param {*} a: number\n   * @param {*} f: vec2\n   * @returns vec2\n   */\n  _solveUpTriMatrix(v, a, f) {\n    const v1 = v.get(0);\n    const v2 = v.get(1);\n    const av2 = a * v2;\n    if (av2 === 0 || v2 === 0) return undefined;\n    const f1 = f.get(0);\n    const f2 = f.get(1);\n    return vec2.of(f2 / v2, (f1 * v2 - v1 * f2) / av2);\n  }\n\n  //========================================================================================\n  /*                                                                                      *\n   *                                   Static functions                                   *\n   *                                                                                      */\n  //========================================================================================\n\n  static builder() {\n    return new CanvasBuilder();\n  }\n}\n\nexport class CanvasBuilder {\n  _canvas = document.createElement(\"canvas\");\n  _width = 500;\n  _height = 500;\n  constructor() { }\n\n  width(width = this._width) {\n    this._width = width;\n    return this;\n  }\n\n  height(height = this._height) {\n    this._height = height;\n    return this;\n  }\n\n  build() {\n    this._canvas.setAttribute(\"width\", this._width);\n    this._canvas.setAttribute(\"height\", this._height);\n    return new Canvas(this._canvas);\n  }\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/assertThisInitialized\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/esm/get\");","import BBox from \"../../BBox/main/BBox\";\nimport Canvas, { CanvasBuilder } from \"../../Canvas/main/Canvas\";\nimport Matrix from \"../../Matrix/main/Matrix\";\nconst { vec2 } = Matrix;\n\nexport default class Canvas2d extends Canvas {\n  constructor(canvas, camera) {\n    super(canvas);\n    this.camera = camera;\n  }\n\n  setCamera(bbox) {\n    this.camera = bbox;\n  }\n\n  map(lambda = () => {}) {\n    return super.map((c, i, j) => {\n      const [x, y] = this.forwardCoord(i, j);\n      return lambda(c, x, y);\n    });\n  }\n\n  getPxl(x, y) {\n    const [i, j] = this.inverseCoord(x, y);\n    return super.getPxl(i, j);\n  }\n\n  setPxl(x, y, color) {\n    const [i, j] = this.inverseCoord(x, y);\n    return super.setPxl(i, j, color);\n  }\n\n  drawLine(start, end, shader) {\n    const startPos = this.inverseCoord(...start);\n    const endPos = this.inverseCoord(...end);\n    return super.drawLine(startPos, endPos, shader);\n  }\n\n  drawTriangle(p0, p1, p2, shader) {\n    const q0 = this.inverseCoord(...p0);\n    const q1 = this.inverseCoord(...p1);\n    const q2 = this.inverseCoord(...p2);\n    return super.drawTriangle(q0, q1, q2, shader);\n  }\n\n  /**\n   * Map from camera coord to canvas coord\n   */\n  inverseCoord(x, y) {\n    const { min, max } = this.camera;\n    const { width, height } = this.canvas;\n    const [minX, minY] = min.data;\n    const [maxX, maxY] = max.data;\n    return [\n      (-(y - maxY) * (height - 1)) / (maxY - minY),\n      ((x - minX) * (width - 1)) / (maxX - minX),\n    ].map(Math.floor);\n  }\n\n  /**\n   * Map from canvas coord to camera coord\n   */\n  forwardCoord(i, j) {\n    const { min, max } = this.camera;\n    const { width, height } = this.canvas;\n    const [minX, minY] = min.data;\n    const [maxX, maxY] = max.data;\n    return [\n      minX + ((maxX - minX) * j) / (width - 1),\n      maxY + ((minY - maxY) * i) / (height - 1),\n    ];\n  }\n\n  static builder() {\n    return new Canvas2dBuilder();\n  }\n}\n\nexport class Canvas2dBuilder extends CanvasBuilder {\n  _camera = new BBox(vec2.of(-1, -1), vec2.of(1, 1));\n\n  camera(bbox = this._camera) {\n    this._camera = bbox;\n    return this;\n  }\n\n  build() {\n    const canvasBase = super.build();\n    return new Canvas2d(canvasBase.canvas, this._camera);\n  }\n}\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","ImageIO","img","canvasAux","document","createElement","width","height","contextAux","getContext","fillStyle","globalCompositeOperation","fillRect","drawImage","canvas","getImageCanvas","getImageData","src","Image","isReady","onload","add","u","v","ans","floor","x","Math","diff","dot","squareNorm","norm","sqrt","min","max","solve2by2UpperTriMatrix","h","z","aux","solve2by2LowerTriMatrix","w","hashMap","Canvas","this","ctx","image","imageData","data","getSize","paintImage","putImageData","getCanvas","clearImage","rgba","useCanvasCtx","size","lambda","arguments","length","undefined","getImageIndex","getPxl","index","drawPxl","rgb","drawLine","x1","x2","shader","points","stack","push","inStack","outStack","i","intersectionSolutions","validIntersection","p","drawLineInt","pop","p0","n","nn","tangent","normal","fmin","Number","MAX_VALUE","minDir","k","j","f","abs","drawPolygon","array","isInsidePoly","isInsidePolygon","upperBox","MIN_VALUE","clampedSize","zeros","drawTriangle","x3","isInsideConvex","drawQuad","x4","drawCircle","r","corner","scale","isInsideCircle","addEventListener","useCapture","drawString","string","contextShader","fillText","theta","acos","PI","m","vDotN","orientation","simpleShader","color","element","colorShader","colors","interpolateTriangleShader","poly","alpha","interpolateColors","interpolateQuadShader","quad","t1","t2","triangleBaryCoord","triangle","interpolateLineShader","line","vnorm","projection","quadTextureShader","quadTexCoord","interpolation","bilinearInterpolation","imageCache","imageCanvas","imgSize","interpolateTexCoord","cornerColors","finalColor","triangleCache","constains","triangleHash","set","value","reduce","hash","y","det","map","cache","values","acc","f03","createCanvas","domId","setAttribute","getElementById","appendChild","Canvas2D","cameraSpace","create","constructor","integerTransform","inverseTransform","y1","y2","y3","y4","setCamera","camera","require","MAX_8BIT","Color","_classCallCheck","_createClass","red","green","blue","Uint8Array","random","ofRGBA","_class","_defineProperty","getIndexFromCoord","_","getCoordFromIndex","MatrixBuilder","_size","MatrixError","concat","index2Key","_this","_this$_size","_slicedToArray","Float64Array","indexer","keys","forEach","apply","_toConsumableArray","split","Matrix","RowBuilder","rows","dim","_len","Array","_key","_buildWithRows","cols","indexF","_buildWithCols","WeakSet","ColBuilder","_len2","_key2","_classPrivateMethodGet","_buildWithCols2","shape","_this$shape","matrix","l","prod","getCoord","_getCoord","_getCoord2","identity","e","_getCoord3","_getCoord4","binaryLambda","_this$shape2","_matrix$shape","mRows","mCols","op","b","real","precision","sub","error","builder","build","_ColBuilder","addCol","_RowBuilder","addRow","_class2","en","matrixBuilder","colBuilder","_matrixBuilder","of","vec","e0","e1","ZERO","e2","_Error","_inherits","_super","_wrapNativeSuper","Error","BBox","isEmpty","center","diagonal","box","EMPTY","newMin","newMax","every","vector","actionByTypes","type","action","equals","point","vec2"],"sourceRoot":""}